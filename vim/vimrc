"
" Filename: ~/.vimrc
" Author: Allen Chen<a3linux@gmail.com>
" Date: 24/09/2017
" Clear comments on all VIM settings
"

" No vi(old) features
set nocompatible

"
" Begin plug.vim
"
" If plug.vim is missed
let wantInstallPlugins=0
let plugvim_file=expand('~/.vim/autoload/plug.vim')
if !filereadable(plugvim_file)
    echo ""
	echo "Installing plug.vim..."
	echo ""
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    let wantInstallPlugins=1
endif
set rtp+=~/.vim/plugged
call plug#begin('~/.vim/plugged')
" Begin Plugins
"
" L9 for vim plugin developping
" Plugin 'L9'
"
" UI Plugins
" colorscheme
Plug 'NLKNguyen/papercolor-theme'
" Statusbar - airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Tab

" TmuxLine
Plug 'edkolev/tmuxline.vim'
" Tmux Navigator
Plug 'christoomey/vim-tmux-navigator'

" File Browser
Plug 'scrooloose/nerdtree'
" Git tags in NERDTree
Plug 'Xuyuanp/nerdtree-git-plugin'
" Keep NERDTree on each tab
Plug 'jistr/vim-nerdtree-tabs'

" CtrlP
Plug 'ctrlpvim/ctrlp.vim'

" Editting
" remove tail blanks
Plug 'ntpeters/vim-better-whitespace'
" comment code
Plug 'scrooloose/nerdcommenter'
" auto pairs(surround)
Plug 'jiangmiao/auto-pairs'
Plug 'Townk/vim-autoclose'
Plug 'tpope/vim-surround'  " Play with cs, ds and ys
Plug 'tpope/vim-repeat'

" git support
" Git command wrapper - :G<git-cmd>
Plug 'tpope/vim-fugitive'
" Filetype for gitconfig, gitcommit, gitrebase ...
Plug 'tpope/vim-git'
" Plugin to show git diff in gutter(sign column)
Plug 'airblade/vim-gitgutter'

" Programming languages
Plug 'vim-syntastic/syntastic'

" tarbar - fly in tags
Plug 'majutsushi/tagbar'

" perl

" Go

" Python

" Php

" Javascript / es / json
Plug 'pangloss/vim-javascript'
Plug 'maksimr/vim-jsbeautify'

" Typescript

" css

" markdown

" shell / powershell / batch


" HTML/XML and mark languages
Plug 'alvan/vim-closetag'

" Complete solution
" YouCompleteMe - Disable as install need compile and more Settings
" Plug 'Valloric/YouCompleteMe'

" Completor.vim, vim8 based autocomplete and almost without any additional
" steps for installation and configuration
Plug 'maralla/completor.vim'
" Code snippet
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" End Plugins

" Install plugins
if wantInstallPlugins == 1
    echo ""
    echo "Installing plugins, please ignore key map error messages"
    echo ""
    :PlugInstall
endif

call plug#end()
" End plug.vim

"
" Begin general settings
"
" general
filetype plugin indent on
set encoding=utf-8
let &termencoding=&encoding
set fileencodings=utf-8,gb18030,ucs-bom,cp936
set ffs=unix,mac,dos
" tab, space and indent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set autoindent
set smartindent
set cindent
" set textwidth=80
" editting
set backspace=indent,eol,start
set wrap
set nobackup
set noswapfile
set nowritebackup
set history=1000
set showcmd
set autoread
set scrolloff=3
set sidescrolloff=2
set virtualedit=block
" Vim autocomplete
set wildmenu
set wildmode=longest:list,full
set formatoptions+=cro
set wildignore+=*.o,*~,*.lo,*.pyc,*.swp,*.png,*.jpg,*.obj,*.class,*.a,*.so,*.gif,*.xcf,*.psd
set suffixes+=.pdf,.docx,.doc,.xls,.ppt
" Search
set path+=**
set mat=2
set hlsearch
set incsearch
set ignorecase
set smartcase
set infercase
" UI
syntax on
set number
set relativenumber
set ruler
set lazyredraw
set laststatus=2
set statusline=%F%m%r%h%W\ [%{&ff}][%Y][%{&fenc}][%04l,%04v,%p%%\ %L]
set cmdheight=2
set linespace=0
set winminheight=1
set showtabline=2
set cursorline
set cursorcolumn
let &t_SI = "\e[5 q"
let &t_EI = "\e[1 q"
set vb t_vb=
set noerrorbells
set mouse=a
set mousehide
set lbr
set background=dark
" Colorscheme settings
if &term =~? 'mlterm\|xterm\|xterm-256\|screen-256'
    let &t_Co = 256
    colorscheme PaperColor
else
    colorscheme delek
endif

if has('gui_running')
    colorscheme PaperColor
    set columns=88 lines=64
    if has("gui_macvim")
        set guifont=Inconsolata-g\ for\ Powerline:h13
    else
        set guifont=Inconsolata-g\ for\ Powerline\ Medium\ 11
        set guioptions-=m
        set guioptions-=T
        set guioptions-=r
        set guioptions-=L
    endif
endif

let g:PaperColor_Theme_Options = {
            \ 'language': {
            \   'python': {
            \       'highlight_builtins': 1
            \   }
            \},
            \ 'theme': {
            \   'default.dark': {
            \       'transparent_background': 1
            \       }
            \   }
            \}
" Set background to none(transparent)
highlight Normal ctermbg=none
highlight NonText ctermbg=none

" Statusbar vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'papercolor'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tmuxline#enabled = 1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#hunks#non_zero_only = 1

"
" key and shortcuts
let mapleader=';'
" Tab Shortcuts
" As gt, gT is also very easy to switch tabs, remove tn and tp
" New Tab
map tt :tabnew
" split windows in new tab
map ts :tab split<CR>

" fold
set foldenable
set foldlevelstart=99
set foldnestmax=10
set foldmethod=manual

" End general settings

"
" Begin plugins settings

" File Browser NERDTree
" ;n to toggle NERDTree
map <leader>n :NERDTreeToggle<CR>
" Open NERDTree if no file opening
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("S:std_in") | NERDTree | endif
" Ingore files in NERDTree
let NERDTreeIgnore = ['\.git/', '\.pyc$', '\.pyo$', '\.jpg', '\.jpeg', '\.png', '\.pdf', '\.docx', '\.xls', '\.o', '\.lo', '\.so']

" If gitgutter has lag(slow), try to uncomment following lines
" let g:gitgutter_realtime = 0
" let g:gitgutter_eager = 0

" CtrlP settings
" CtrlP (new fuzzy finder)
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_show_hidden = 1
nmap ;g :CtrlPBufTag<CR>
nmap ;G :CtrlPBufTagAll<CR>
nmap ;f :CtrlPLine<CR>
nmap ;m :CtrlPMRUFiles<CR>
nmap ;c :CtrlPCmdPalette<CR>
" Don't change working directory
let g:ctrlp_working_path_mode = 0
" Ignore files on fuzzy finder
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',
  \ 'file': '\v\.(pyc|pyo|jpg|jpeg$|png|gif|docx|pdf)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" completor.vim
let g:completor_python_binary = '/usr/local/bin/python3'
let g:completor_node_binary = '/usr/local/bin/node'
let g:completor_gocode_binary = '/usr/local/bin/gocode'
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-l>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Fix to let ESC work as escape with Autoclose plugins
let g:AutoClosePumvisible = { "ENTER": "\<C-Y>", "ESC": "\<ESC>" }

" vim-syntastic/syntastic
" show list of errors and warnings on the current file
" Looks we already have airline
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
nmap <leader>e :Errors<CR>
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_enable_signs = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'"
" Checkers
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_javascript_checkers = ['eslint', 'node']
" let g:syntastic_php_checkers = ['php']
" let g:syntastic_go_checkers = ['go', 'gofmt']

" toggle Tagbar display
map <leader>t :TagbarToggle<CR>
" autofocus on Tagbar open
let g:tagbar_autofocus = 1
" autoclose on Tagbar open
let g:tagbar_autoclose = 1

" better-whitespace
" By default enable whitespace remove on save for all files
autocmd BufEnter * EnableStripWhitespaceOnSave
" setup the blacklist for special filetype(s) which DON'T remove whitespace
let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'unite', 'qf', 'help']

" Call JSBeautify
autocmd FileType jsx  noremap <buffer> <c-f> :call JsxBeautify()<cr>
autocmd FileType json  noremap <buffer> <c-f> :call JsonBeautify()<cr>
autocmd FileType javascript noremap <buffer> <c-f> :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType vue noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FIleType ejs noremap <buffer> <c-f> :call HtmlBeautify()<cr>

" End plugins settings

"
" Begin functions
" different ts
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType vue setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType jsx setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType ejs setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType json setlocal shiftwidth=2 tabstop=2 softtabstop=2

" End functions

"
" Other Settings
